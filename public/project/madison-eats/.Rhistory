install.packages("blogdown")
blogdown::install_hugo()
blogdown:::serve_site()
library(blogdown)
serve_site()
install.packages(c("processx", "later"))
options(blogdown.generator.server = TRUE)
blogdown::serve_site()
shiny::runApp('adambirenbaum.com/public/project/madison-eats')
runApp('adambirenbaum.com/public/project/madison-eats')
runApp('adambirenbaum.com/public/project/madison-eats')
runApp('adambirenbaum.com/public/project/madison-eats')
blogdown:::serve_site()
blogdown:::serve_site()
shiny::runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
bisect_arrows_df
bisect_arrows_df$text <- 1:nrow(bisect_arrows_df)
mean(bisect_arrows_df$x,bisect_arrows_df$xend)
mean(c(bisect_arrows_df$x,bisect_arrows_df$xend))
apply(bisect_arrows_df[,c(1,2)],MARGIN = 1, mean)
bisect_arrows_df$textx <- apply(bisect_arrows_df[,c(1,2)],MARGIN = 1, mean)
bisect_arrows_df$y*1.1
bisect_arrows_df$texty <- bisect_arrows_df$y*1.05
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_segment(data = bisect_arrows_df, aes(x = x, y = y, xend = xend, yend = yend),arrow = arrow(angle = 15),size = 2)+
geom_text(data = bisect_arrows_df,aes(x = textx,y = texty, label = text))
g
print(g)
dev.off()
g
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
d_function
head(d_function)
runApp('adambirenbaum.com/public/project/numerical-methods')
paste0(roots_function()," + x")
safely_get_fx_df <- function(f_string){
xrange <- xrange()
x <- seq(from = xrange[1], to = xrange[2], length.out = 3000)
error_check <- try(eval(parse(text = f_string)),silent = T)
error_check2 <- try(as.numeric(error_check),silent = T)
if (is_error(error_check) | is_error(error_check2)){
return(NULL)
}else{
xrange <- xrange()
x <- seq(from = xrange[1], to = xrange[2], length.out = 3000)
y <- eval(parse(text = f_string))
data.frame(x = x, y = y)
}
}
d_function <- safely_get_fx_df(roots_function())
head(d)
head(d_function)
new_f <- paste0(roots_function()," + x")
d_new_function <- safely_get_fx_df(new_f)
head(d_new_function)
dev.off()
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
ggplot(data = d_new_function, aes(x = x, y=y)) + geom_line(size = 2)
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)
g
d_fx <- safely_get_fx_df(fx)
new_f
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 2)
head(d_fx)
runApp('adambirenbaum.com/public/project/numerical-methods')
d_fx
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 2)
dev.off()
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 2)
g
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 1)
g
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+ylim(-5,5)
g
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+ylim(-5,5)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+ ylim(input$yrange[1],input$yrange[2]) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_new_function, aes(x = x, y=y),size = 2)+
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+ ylim(input$yrange[1],input$yrange[2]) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+ ylim(input$yrange[1],input$yrange[2]) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g
initial__guess <- guess2()
initial__guess <- input$guess2
niter <- input$fixed_niter
gx_string <- paste0(roots_function()," + x")
gx_df <- safely_get_fx_df(gx_string)
x_string <- "x"
x_df <- safely_get_fx_df(fx)
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_df))
get_y_value_from_x <- function(x,f_string){
sapply(x,function(x) eval(parse(text = f_string)),USE.NAMES = F )
}
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_df))
initial_guess <- input$guess2
x_root_vec <- initial_guess
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_df))
x_root_vec
x_root_vec = 1
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_df))
y_point_vec
initial_guess=1
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_df))
y_point_vec
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_string))
y_point_vec
df <- data.frame(x = c(initial_guess,y_point_vec), y = c(0,y_point_vec))
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+ ylim(input$yrange[1],input$yrange[2]) +
geom_point(data = df, aes(x = x, y=y),color = "red")+
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_point(data = df, aes(x = x, y=y),color = "red")+ ylim(-.5,5)+xlim(-.5,1.5)
g
y_point_vec
g <-  ggplot(data = d_function, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_point(data = df, aes(x = x, y=y),color = "red")+ ylim(-.5,1)+xlim(-.5,1.5)
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_point(data = df, aes(x = x, y=y),color = "red")+ ylim(-.5,1)+xlim(-.5,1.5)
g
niter = 4
for (i in 1:niter){
if (i == 1) next()
x_root_vec <- c(x_root_vec, get_y_value_from_x(x_root_vec[i-1], gx_string))
}
x_root_vec
3 %%2
4%%2
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
fixed_segment_df
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
for (i in 1:(niter+1)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = x_root_vec[i - 1], xend = x_root_vec[i],
y = x_root_vec[i], yend = x_root_vec[i]))
}else{
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = x_root_vec[i - 1], xend = x_root_vec[i - 1],
y = x_root_vec[i - 1], yend = x_root_vec[i]))
}
}
fixed_segment_df
x_root_vec
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
root_index <- 3
for (i in 1:(niter+1)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$x[i - 1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = fixed_segment_df$yend[i-1]))
}else{
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$yend[i-1], fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index]))
root_index <- root_index + 1
}
}
x_root_vec
fixed_segment_df
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
root_index <- 3
for (i in 1:(niter+1)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$x[i - 1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = fixed_segment_df$yend[i-1]))
}else{
browser()
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$yend[i-1], fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index]))
root_index <- root_index + 1
}
}
data.frame(x = fixed_segment_df$yend[i-1], fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index])
data.frame(x = fixed_segment_df$yend[i-1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index])
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
root_index <- 3
for (i in 1:(niter+1)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$x[i - 1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = fixed_segment_df$yend[i-1]))
}else{
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$yend[i-1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index]))
root_index <- root_index + 1
}
}
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
root_index <- 3
for (i in 1:(niter+1)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$x[i - 1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = fixed_segment_df$yend[i-1]))
}else{
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$yend[i-1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index]))
root_index <- root_index + 1
}
}
fixed_segment_df
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)+
ylim(input$yrange[1],input$yrange[2]) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)+
ylim(input$yrange[1],input$yrange[2]) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
fixed_segment_df
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)
g
root_label_df <- data.frame(x = x_root_vec, y = 0)
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)
roots_label_df <- data.frame(x = x_root_vec, y = 0)
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)
g
roots_label_df <- data.frame(x = x_root_vec, y = 0,text = 1:nrow(roots_label_df))
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)
g
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
root_index <- 3
for (i in 1:(niter+2)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$x[i - 1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = fixed_segment_df$yend[i-1]))
}else{
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$yend[i-1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index]))
root_index <- root_index + 1
}
}
fixed_segment_df
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2)+ ylim(-.5,1)+xlim(-.5,1.5)
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow())+ ylim(-.5,1)+xlim(-.5,1.5)
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow(type = "closed"))+ ylim(-.5,1)+xlim(-.5,1.5)
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow(length = unit(.3,"cm"),type = "closed"))+ ylim(-.5,1)+xlim(-.5,1.5)
g
niter = 6
x_root_vec <- initial_guess
y_point_vec <- c(get_y_value_from_x(initial_guess,gx_string))
for (i in 1:niter){
if (i == 1) next()
x_root_vec <- c(x_root_vec, get_y_value_from_x(x_root_vec[i-1], gx_string))
}
roots_label_df <- data.frame(x = x_root_vec, y = 0,text = 1:nrow(roots_label_df))
x_root_vec
roots_label_df <- data.frame(x = x_root_vec, y = 0,text = 1:length(x_root_vec))
fixed_segment_df <- data.frame(x = initial_guess,xend = initial_guess, y = 0, yend = x_root_vec[2])
root_index <- 3
for (i in 1:(niter+2)){
if (i == 1) next
if (i %% 2 == 0){
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$x[i - 1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = fixed_segment_df$yend[i-1]))
}else{
fixed_segment_df <- rbind(fixed_segment_df, data.frame(x = fixed_segment_df$yend[i-1], xend = fixed_segment_df$yend[i-1],
y = fixed_segment_df$yend[i-1], yend = x_root_vec[root_index]))
root_index <- root_index + 1
}
}
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow(length = unit(.3,"cm"),type = "closed"))+
ylim(input$yrange[1],input$yrange[2]) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow(length = unit(.3,"cm"),type = "closed"))+
ylim(-.5,1)
g
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = d_fx, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow(length = unit(.3,"cm"),type = "closed"))+
ylim(-.5,1) +xlim(-.5,1.5)
g
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
x_df
x_df <- safely_get_fx_df(x_string)
g <-  ggplot(data = gx_df, aes(x = x, y=y)) + geom_line(size = 2) +
geom_label(data = roots_label_df, aes(x =x, y =y, label = text,fill = factor(text)),  fontface = "bold",size = 8) +
geom_line(data = x_df, aes(x = x, y=y),size = 1)+
geom_hline(yintercept = 0)+geom_vline(xintercept = 0)+
geom_segment(data = fixed_segment_df, aes(x = x, y=y,xend = xend, yend = yend),linetype = 2,arrow = arrow(length = unit(.3,"cm"),type = "closed"))+
ylim(input$yrange[1],input$yrange[2]) + scale_fill_brewer(palette ="Blues",direction = -1) + guides(fill=FALSE) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y) +
ylab("f(x)") + ggtitle(TeX(convert_string_to_latex(roots_function()))) + theme(axis.text = element_text(size = rel(1.5)),
title = element_text(size = rel(3)))
g
dev.off()
g
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
gx_string
convert_string_to_latex(gx_string)
convert_string_to_latex(gx_string)
dev.off()
convert_string_to_latex(gx_string)
runApp('adambirenbaum.com/public/project/numerical-methods')
convert_string_to_latex(gx_string)
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
runApp('adambirenbaum.com/public/project/numerical-methods')
shiny::runApp('adambirenbaum.com/public/project/madison-eats')
